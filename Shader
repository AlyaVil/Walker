let myShader;
let vs =
`
precision mediump float; 
attribute vec3 aPosition;
attribute float aIndex; 
uniform float uPointSize;
const float TAU = 6.28318;
varying float vStrokeWeight;
varying float vIndex;
uniform mat4 uModelViewMatrix;
uniform mat4 uProjectionMatrix;
void main() {
  vec4 positionVec4 =  vec4(aPosition, 1.0);
  vIndex = aIndex;
  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;
  gl_PointSize = uPointSize;
  vStrokeWeight = uPointSize;
}
`
let fs =
`
precision mediump float;
precision mediump int;
uniform vec4 uMaterialColor;
uniform float uCount;
uniform sampler2D uTex;
const float TAU = 6.28318;
varying float vStrokeWeight;
varying float vIndex;

// getRGB
vec3 getRGB(float h, float s, float b){
    vec3 c = vec3(h, s, b);
    vec3 rgb = clamp(abs(mod(c.x * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);
    rgb = rgb * rgb * (3.0 - 2.0 * rgb);
    return c.z * mix(vec3(1.0), rgb, c.y);
}

void main(){
  float mask = 0.0;

  // make a circular mask using the gl_PointCoord (goes from 0 - 1 on a point)
  // might be able to get a nicer edge on big strokeweights with smoothstep but slightly less performant

  mask = step(0.98, length(gl_PointCoord * 2.0 - 1.0));

  // if strokeWeight is 1 or less lets just draw a square
  // this prevents weird artifacting from carving circles when our points are really small
  // if strokeWeight is larger than 1, we just use it as is
 mask = mix(0.0, mask, clamp(floor(vStrokeWeight - 0.5),0.0,1.0));

  // throw away the borders of the mask
  // otherwise we get weird alpha blending issues

  if(mask > 0.98){
    discard;
  }
  vec2 offset = gl_PointCoord.xy * 0.25;
  vec2 tex = vec2(mod(vIndex, 4.0) * 0.25, floor(vIndex / 4.0) * 0.25);
  vec4 col = texture2D(uTex, tex + offset);
  if(col.a < 0.01){ discard; }
  gl_FragColor = col;
}
`
let gr;
let buf; 
let pointBuf1; 
let pointBuf2;

let dummy = new Float32Array(45);

//const W = 720;

// Biological motion walker instance
const bmw = new BMWalker(0);

// gui
let config = {
  sizeFactor: 1,
  speed: 1.0,
  bodyStructure: 0.0,
  weight: 0.0,
  nervousness: 0.0,
  happiness: 0.0,
  dot: true,
  dotSize: 20,
  description: false,
  line: true,
	saver: saver
}

let gui;

function startGUI(){
  gui = new dat.GUI({ width:240 });
 let walkerFolder = gui.addFolder('Walker');
  const step = 0.1;
  walkerFolder.add(config, 'sizeFactor', 0.1, 2, 0.05);
  walkerFolder.add(config, 'speed', bmw.minSpeed, bmw.maxSpeed, step);
  walkerFolder.add(config, 'bodyStructure', bmw.minBodyStructure, bmw.maxBodyStructure, step);
  walkerFolder.add(config, 'weight', bmw.minWeight, bmw.maxWeight, step);
  walkerFolder.add(config, 'nervousness', bmw.minNervousness, bmw.maxNervousness, step);
  walkerFolder.add(config, 'happiness', bmw.minHappiness, bmw.maxHappiness, step);
  
  let canvasFolder = gui.addFolder('Canvas');
  canvasFolder.add(config, 'dot');
  canvasFolder.add(config, 'dotSize', 0, 40, 1);
  canvasFolder.add(config, 'description');
  canvasFolder.add(config, 'line');
	//canvasFolder.add(config, 'saver');
  
  gui.add({fun:initializeSettings}, 'fun').name('reset');
	gui.add(config, 'saver').name('Save Screenshot');
}

// Setting values for dat GUI

const walkerSettingsDefault = {
  sizeFactor: 1,
  speed: 1.0,
  bodyStructure: 0.0,
  weight: 0.0,
  nervousness: 0.0,
  happiness: 0.0,
};

const canvasSettingsDefault = {
  dot: true,
  dotSize: 20,
  description: false,
  line: true,
};

// Initialize with default values
const initializeSettings = () => {
  config.sizeFactor = walkerSettingsDefault.sizeFactor;
  config.speed = walkerSettingsDefault.speed;
  config.bodyStructure = walkerSettingsDefault.bodyStructure;
  config.weight = walkerSettingsDefault.weight;
  config.nervousness = walkerSettingsDefault.nervousness;
  config.happiness = walkerSettingsDefault.happiness;

  config.dot = canvasSettingsDefault.dot;
  config.description = canvasSettingsDefault.description;
  config.dotSize = canvasSettingsDefault.dotSize;
  config.line = canvasSettingsDefault.line;
  
  gui.updateDisplay(); 
  
  };
  let posR = 600*Math.sqrt(3);
let defaultPosR = 600 * Math.sqrt(3); 
let posTheta = Math.PI * 0.4;
let posPhi = Math.PI*0.66;
let focusX = 0;
let focusY = 0;
let eyeVector, toCenterVector, sideVector, upVector;

let gl;
let _gl;

// p5.js Sketch
function setup() {
  // On p5.js canvas
  _gl = createCanvas(1112, 834, WEBGL);
  gl = _gl.GL;

  pixelDensity(1);

  // Prepare GUI
  startGUI();
  
  myShader = createShader(vs, fs);
  myShader.isPointShader = () => true;
  _gl.userPointShader = myShader;
  
  let mks = bmw.getMarkers(); 
  gr = createGraphics(1800,1800);
  gr.noStroke();
  gr.fill(255);
  gr.textAlign(CENTER, CENTER);
  gr.textSize(60);
  for(i=0;i<15;i++){
    gr.text(mks[i].desc, 450*(i%4) + 225, 450*floor(i/4) + 225);
  }


  focusX = 0;
  focusY = 0;
  focusZ = 0;

  eyeVector = createVector();
  toCenterVector = createVector();
  sideVector = createVector();
  upVector = createVector();
  
  pointBuf1 = gl.createBuffer();
  pointBuf2 = gl.createBuffer();
}

function draw() {

  //if(config.camera){ moveCamera(); }
  eyeVector.set(posR*sin(posTheta)*sin(posPhi)+focusX,
                posR*sin(posTheta)*cos(posPhi)+focusY,
                posR*cos(posTheta)+focusZ);
  
  moveCamera();
  camera(eyeVector.x, eyeVector.y, eyeVector.z, focusX, focusY, focusZ, 0, 0, -1);
  const m = _gl.uMVMatrix.copy().mat4
  
    toCenterVector.set(-m[2], -m[6], -m[10]);
  sideVector.set(m[0], m[4], m[8]);
  upVector.set(m[1], m[5], m[9]);
  
  gl.enable(gl.DEPTH_TEST);
  
  // Set speed
  bmw.setSpeed(config.speed);

  // Set Walker params
  bmw.setWalkerParam(
    config.bodyStructure,
    config.weight,
    config.nervousness,
    config.happiness
  );

  background(0);
  directionalLight(255,255,255,0,0,-1);
	directionalLight(160,160,160,-1,0,0);
  ambientLight(170);
  
  resetShader();
  
  fill(255,200,100);
  noStroke();

  let mks = bmw.getMarkers();
  let v = bmw.getVectors(0.5 * config.sizeFactor);

  let groundHeight = 9999;
  for(let p of v){
    translate(p.x, p.y, p.z);
    if(config.dot){ 
			sphere(config.dotSize * config.sizeFactor);
		}
    translate(-p.x,-p.y,-p.z);
    if(p.z < groundHeight){groundHeight = p.z;}
  }

  fill(0,128,255);
  translate(0,0,groundHeight);
  plane(1200);
  translate(0,0,-groundHeight);
  
  stroke(255,242,0);
  strokeWeight(4);
  
  if(config.line){
    const es = [[0, 1],[1, 2],[2, 3],[3, 4],[1, 5],[5, 6],[6, 7],[1, 8],[8, 9],[9, 10],[10, 11],[8, 12],[12, 13],[13, 14]];

    for(let e of es){
			  strokeWeight(4);
      line(v[e[0]].x, v[e[0]].y, v[e[0]].z, v[e[1]].x, v[e[1]].y, v[e[1]].z);
    }
  }
 gl.disable(gl.DEPTH_TEST);
  resetShader();
  shader(myShader);
  strokeWeight(100);
  
  // https://qiita.com/inaba_darkfox/items/6894b4fd54a9dacacf96
  const uni = myShader.uniforms.uTex;
  gl.activeTexture(gl.TEXTURE0 + 0);
  uni.texture = myShader._renderer.getTexture(gr);
  gl.bindTexture(gl.TEXTURE_2D, uni.texture.glTex);
  gl.uniform1i(uni.location, 0);
  
  if(config.description){ myPoints(); }
}


function myPoints(){
  const gId = `myPoints|16`;
  if(!_gl.geometryInHash(gId)){
    const geom = new p5.Geometry();
    geom.vertices = [];
    geom.indices = [];
    let v = createVector();
    for(let i = 0; i < 16; i++){
      let x = 0;
      let y = 0;
      let z = 0;
      geom.vertices.push(v.set(x, y, z).copy());
      geom.indices.push(i);
    }
    buf = this._renderer.createBuffers(gId, geom);
  }
  
  myDrawPoints();
}
// myDrawPoints.

function myDrawPoints(){
  _gl._setPointUniforms(myShader);


  gl.bindBuffer(gl.ARRAY_BUFFER, pointBuf1);
  
  let values1 = _gl._vToNArray(buf.model.vertices);
  
  // values1
  let data1 = new Float32Array(values1);
  gl.bufferData(gl.ARRAY_BUFFER, data1, gl.DYNAMIC_DRAW);
  gl.bindBuffer(gl.ARRAY_BUFFER, null);

  

  gl.bindBuffer(gl.ARRAY_BUFFER, pointBuf2);
  // ベクトルの配列から1列の配列を作る処理
  let values2 = buf.model.indices; // まんまでOK
  // values1の中身を持ったFloat32Arrayを作る処理
  let data2 = new Float32Array(values2);
  gl.bufferData(gl.ARRAY_BUFFER, data2, gl.STATIC_DRAW);
  gl.bindBuffer(gl.ARRAY_BUFFER, null);

  
  gl.bindBuffer(gl.ARRAY_BUFFER, pointBuf1);
  myShader.enableAttrib(myShader.attributes.aPosition, 3);
  
  let v = bmw.getVectors(0.5 * config.sizeFactor);
  for(let i = 0; i < 15; i++){
    dummy[3*i] = v[i].x;
    dummy[3*i+1] = v[i].y;
    dummy[3*i+2] = v[i].z;
  }
  gl.bufferSubData(gl.ARRAY_BUFFER, 0, dummy);
  
  gl.bindBuffer(gl.ARRAY_BUFFER, pointBuf2);
  myShader.enableAttrib(myShader.attributes.aIndex, 1);

  gl.drawArrays(gl.Points, 0, buf.model.vertices.length);
  myShader.unbindShader();
}


// --------------------------------------------------------------- //
// camera.

function moveCamera(){
  if(mouseIsPressed){
    const dx = mouseX - pmouseX;
    const dy = mouseY - pmouseY;
    if(mouseButton == LEFT){
      posPhi += dx * 0.01;
      posTheta = constrain(posTheta + dy * 0.01, PI*0.001, PI*0.499);
    }
